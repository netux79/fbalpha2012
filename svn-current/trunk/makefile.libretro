DEBUG = 0
LIBRETRO_OPTIMIZATIONS = 1
FRONTEND_SUPPORTS_RGB565 = 1
HAVE_GRIFFIN = 0
USE_OLD_MAPPING = 0
EXTERNAL_ZLIB = 0
INCLUDE_7Z_SUPPORT = 0

# system platform
ifeq ($(platform),)
   platform = unix
   ifeq ($(shell uname -a),)
      platform = win
      EXE_EXT=.exe
   else ifneq ($(findstring Darwin,$(shell uname -a)),)
      platform = osx
      arch = intel
      ifeq ($(shell uname -p),powerpc)
         arch = ppc
      endif
   else ifneq ($(findstring MINGW,$(shell uname -a)),)
      platform = win
      EXE_EXT=.exe
   endif
else ifneq (,$(findstring armv,$(platform)))
   override platform += unix
endif


MAIN_FBA_DIR := src
FBA_BURN_DIR := $(MAIN_FBA_DIR)/burn
FBA_BURN_DRIVERS_DIR := $(MAIN_FBA_DIR)/burn/drv
FBA_BURNER_DIR := $(MAIN_FBA_DIR)/burner
LIBRETRO_DIR := $(FBA_BURNER_DIR)/libretro
FBA_CPU_DIR := $(MAIN_FBA_DIR)/cpu
FBA_LIB_DIR := $(MAIN_FBA_DIR)/dep/libs
FBA_INTERFACE_DIR := $(MAIN_FBA_DIR)/intf
FBA_GENERATED_DIR = $(MAIN_FBA_DIR)/dep/generated
FBA_SCRIPTS_DIR = $(MAIN_FBA_DIR)/dep/scripts
GRIFFIN_DIR = griffin-libretro

# TARGET
ifeq ($(target),cps1)
   TARGET_NAME := fbalpha2012_cps1
   FBA_DEFINES += -DTARGET=\"\ CPS-1\" -DCPS1_ONLY
else ifeq ($(target),cps2)
   TARGET_NAME := fbalpha2012_cps2
   FBA_DEFINES += -DTARGET=\"\ CPS-2\" -DCPS2_ONLY
else ifeq ($(target),cps3)
   TARGET_NAME := fbalpha2012_cps3
   FBA_DEFINES += -DTARGET=\"\ CPS-3\" -DCPS3_ONLY
else ifeq ($(target),neogeo)
   TARGET_NAME := fbalpha2012_neogeo
   FBA_DEFINES += -DTARGET=\"\ Neo\ Geo\" -DNEOGEO_ONLY
else
   TARGET_NAME := fbalpha2012
endif

# GIT HASH
GIT_VERSION := " $(shell git rev-parse --short HEAD || echo unknown)"
ifneq ($(GIT_VERSION)," unknown")
   FBA_DEFINES += -DGIT_VERSION=\"$(GIT_VERSION)\"
endif

# Unix
ifneq (,$(findstring unix,$(platform)))
   TARGET := $(TARGET_NAME)_libretro.so
   fpic := -fPIC
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(LIBRETRO_DIR)/link.T

# OS X
else ifeq ($(platform), osx)
   TARGET := $(TARGET_NAME)_libretro.dylib
   fpic := -fPIC
   SHARED := -dynamiclib
   ifeq ($(arch),ppc)
      ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN -DMSB_FIRST
   endif
   OSXVER = `sw_vers -productVersion | cut -d. -f 2`
   OSX_LT_MAVERICKS = `(( $(OSXVER) <= 9)) && echo "YES"`
   fpic += -mmacosx-version-min=10.1
   ifndef ($(NOUNIVERSAL))
      CFLAGS += $(ARCHFLAGS)
      CXXFLAGS += $(ARCHFLAGS)
      LDFLAGS += $(ARCHFLAGS)
   endif

# iOS
else ifneq (,$(findstring ios,$(platform)))
   TARGET := $(TARGET_NAME)_libretro_ios.dylib
   fpic := -fPIC
   SHARED := -dynamiclib

   ifeq ($(IOSSDK),)
      IOSSDK := $(shell xcodebuild -version -sdk iphoneos Path)
   endif
   ifeq ($(platform),ios-arm64)
      CC = cc -arch arm64 -isysroot $(IOSSDK)
      CXX = c++ -arch arm64 -isysroot $(IOSSDK)   
   else
      CC = cc -arch armv7 -isysroot $(IOSSDK)
      CXX = c++ -arch armv7 -isysroot $(IOSSDK)
   endif
   CFLAGS += -DIOS
   ifeq ($(platform),$(filter $(platform),ios9 ios-arm64))
      CC += -miphoneos-version-min=8.0
      CXX +=  -miphoneos-version-min=8.0
      CFLAGS += -miphoneos-version-min=8.0
   else
      CC += -miphoneos-version-min=5.0
      CXX +=  -miphoneos-version-min=5.0
      CFLAGS += -miphoneos-version-min=5.0
   endif

# Theos iOS
else ifeq ($(platform), theos_ios)
   DEPLOYMENT_IOSVERSION = 5.0
   TARGET = iphone:latest:$(DEPLOYMENT_IOSVERSION)
   ARCHS = armv7 armv7s
   TARGET_IPHONEOS_DEPLOYMENT_VERSION=$(DEPLOYMENT_IOSVERSION)
   THEOS_BUILD_DIR := objs
   include $(THEOS)/makefiles/common.mk
   LIBRARY_NAME = $(TARGET_NAME)_libretro_ios
   CFLAGS += -DIOS

# QNX
else ifeq ($(platform), qnx)
   TARGET := $(TARGET_NAME)_libretro_$(platform).so
   fpic := -fPIC
   SHARED := -lcpp -lm -shared -Wl,-no-undefined -Wl,--version-script=$(LIBRETRO_DIR)/link.T
   CC = qcc -Vgcc_ntoarmv7le
   CXX = QCC -Vgcc_ntoarmv7le_cpp
   AR = qcc -Vgcc_ntoarmv7le
   PLATFORM_DEFINES := -D__BLACKBERRY_QNX__ -marm -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=softfp

# PS3
else ifneq (,$(filter $(platform), ps3 sncps3 psl1ght))
   TARGET := $(TARGET_NAME)_libretro_ps3.a
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN -DMSB_FIRST
   PLATFORM_DEFINES += -D__CELLOS_LV2__
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1

   # sncps3
   ifneq (,$(findstring sncps3,$(platform)))
      PLATFORM_DEFINES += -DSN_TARGET_PS3
      CXX = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      CC = $(CELL_SDK)/host-win32/sn/bin/ps3ppusnc.exe
      AR = $(CELL_SDK)/host-win32/sn/bin/ps3snarl.exe

   # PS3
   else ifneq (,$(findstring ps3,$(platform)))
      CC = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-gcc.exe
      CXX = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-g++.exe
      AR = $(CELL_SDK)/host-win32/ppu/bin/ppu-lv2-ar.exe
      
   # Lightweight PS3 Homebrew SDK
   else ifneq (,$(findstring psl1ght,$(platform)))
      TARGET := $(TARGET_NAME)_libretro_$(platform).a
      CC = $(PS3DEV)/ppu/bin/ppu-gcc$(EXE_EXT)
      CXX = $(PS3DEV)/ppu/bin/ppu-g++$(EXE_EXT)
      AR = $(PS3DEV)/ppu/bin/ppu-ar$(EXE_EXT)
   endif

# Vita
else ifeq ($(platform), vita)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = arm-vita-eabi-gcc$(EXE_EXT)
   CC_AS = arm-vita-eabi-gcc$(EXE_EXT)
   CXX = arm-vita-eabi-g++$(EXE_EXT)
   AR = arm-vita-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DVITA
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1
   INCLUDE_7Z_SUPPORT = 0

# CTR (3DS)
else ifeq ($(platform), ctr)
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   EXTERNAL_ZLIB = 1
   CC = $(DEVKITARM)/bin/arm-none-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITARM)/bin/arm-none-eabi-g++$(EXE_EXT)
   AR = $(DEVKITARM)/bin/arm-none-eabi-ar$(EXE_EXT)
   PLATFORM_DEFINES += -DARM11 -D_3DS
   PLATFORM_DEFINES += -march=armv6k -mtune=mpcore -mfloat-abi=hard
   PLATFORM_DEFINES += -Wall -mword-relocations
   PLATFORM_DEFINES += -fomit-frame-pointer -ffast-math
   CXXFLAGS = $(CFLAGS) -fno-rtti -fno-exceptions -std=gnu++11
   CPU_ARCH := arm
   STATIC_LINKING = 1
   INCLUDE_7Z_SUPPORT = 0

# Xbox 360
else ifeq ($(platform), xenon)
   TARGET := $(TARGET_NAME)_libretro_xenon360.a
   CC = xenon-gcc$(EXE_EXT)
   CXX = xenon-g++$(EXE_EXT)
   AR = xenon-ar$(EXE_EXT)
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN -DMSB_FIRST
   PLATFORM_DEFINES := -D__LIBXENON__ -m32 -D__ppc__
   STATIC_LINKING = 1

# Nintendo Game Cube / Wii / WiiU
else ifneq (,$(filter $(platform), ngc wii wiiu))
   TARGET := $(TARGET_NAME)_libretro_$(platform).a
   CC = $(DEVKITPPC)/bin/powerpc-eabi-gcc$(EXE_EXT)
   CXX = $(DEVKITPPC)/bin/powerpc-eabi-g++$(EXE_EXT)
   AR = $(DEVKITPPC)/bin/powerpc-eabi-ar$(EXE_EXT)
   ENDIANNESS_DEFINES =  -DWORDS_BIGENDIAN -DMSB_FIRST
   PLATFORM_DEFINES := -U__INT32_TYPE__ -U __UINT32_TYPE__ -D__INT32_TYPE__=int
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1

   # Nintendo WiiU
   ifneq (,$(findstring wiiu,$(platform)))
      PLATFORM_DEFINES += -DHW_RVL -mwup -mcpu=750 -meabi -mhard-float

   # Nintendo Wii
   else ifneq (,$(findstring wii,$(platform)))
      PLATFORM_DEFINES += -DGEKKO -DHW_RVL -mrvl -mcpu=750 -meabi -mhard-float
      NO_MD = 1
      NO_CPS = 1
      NO_NEO = 1
      NO_PCE = 1

   # Nintendo Game Cube
   else ifneq (,$(findstring ngc,$(platform)))
      PLATFORM_DEFINES += -DGEKKO -DHW_DOL -mrvl -mcpu=750 -meabi -mhard-float
      NO_MD = 1
      NO_CPS = 1
      NO_NEO = 1
      NO_PCE = 1
   endif

# Emscripten
else ifeq ($(platform), emscripten)
   TARGET := $(TARGET_NAME)_libretro_$(platform).bc
   PLATFORM_DEFINES := -DUSE_FILE32API
   ENDIANNESS_DEFINES := -DNO_UNALIGNED_MEM
   EXTERNAL_ZLIB = 1
   STATIC_LINKING = 1

# GCW0
else ifeq ($(platform), gcw0)
   TARGET := $(TARGET_NAME)_libretro.so
   CC = /opt/gcw0-toolchain/usr/bin/mipsel-linux-gcc
   CXX = /opt/gcw0-toolchain/usr/bin/mipsel-linux-g++
   AR = /opt/gcw0-toolchain/usr/bin/mipsel-linux-ar
   fpic := -fPIC
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(LIBRETRO_DIR)/link.T
   LDFLAGS += $(PTHREAD_FLAGS)
   CFLAGS += $(PTHREAD_FLAGS) -DHAVE_MKDIR
   CFLAGS += -ffast-math -march=mips32 -mtune=mips32r2 -mhard-float
   CXXFLAGS += -std=gnu++11 -ffast-math -march=mips32 -mtune=mips32r2 -mhard-float

# Windows
else
   TARGET := $(TARGET_NAME)_libretro.dll
   CC = gcc
   CXX = g++
   SHARED := -shared -Wl,-no-undefined -Wl,--version-script=$(LIBRETRO_DIR)/link.T
   LDFLAGS += -static-libgcc -static-libstdc++

endif

CC_SYSTEM = gcc
CXX_SYSTEM = g++

BURN_BLACKLIST := $(FBA_CPU_DIR)/arm7/arm7exec.c \
	$(FBA_CPU_DIR)/arm7/arm7core.c \
	$(FBA_CPU_DIR)/hd6309/6309tbl.c \
	$(FBA_CPU_DIR)/hd6309/6309ops.c \
	$(FBA_CPU_DIR)/konami/konamtbl.c \
	$(FBA_CPU_DIR)/konami/konamops.c \
	$(FBA_CPU_DIR)/m68k/m68k_in.c \
	$(FBA_CPU_DIR)/m6800/6800ops.c \
	$(FBA_CPU_DIR)/m6800/6800tbl.c \
	$(FBA_CPU_DIR)/m6805/6805ops.c \
	$(FBA_CPU_DIR)/m6809/6809ops.c \
	$(FBA_CPU_DIR)/m6809/6809tbl.c \
	$(FBA_CPU_DIR)/sh2/mksh2.cpp \
	$(FBA_CPU_DIR)/sh2/mksh2-x86.cpp \
	$(FBA_CPU_DIR)/m68k/m68kmake.c \
	$(FBA_BURNER_DIR)/wave_writer.cpp \
	$(FBA_CPU_DIR)/m68k/m68kdasm.c \
	$(FBA_LIBRETRO_DIR)/menu.cpp \
	$(FBA_CPU_DIR)/sh2/mksh2.cpp \
	$(FBA_BURNER_DIR)/sshot.cpp \
	$(FBA_BURNER_DIR)/conc.cpp \
	$(FBA_BURNER_DIR)/dat.cpp \
	$(FBA_BURNER_DIR)/cong.cpp \
	$(FBA_BURNER_DIR)/image.cpp \
	$(FBA_BURNER_DIR)/misc.cpp \
	$(FBA_BURNER_DIR)/gami.cpp \
	$(FBA_BURNER_DIR)/gamc.cpp \
	$(FBA_CPU_DIR)/h6280/tblh6280.c \
	$(FBA_CPU_DIR)/m6502/t65sc02.c \
	$(FBA_CPU_DIR)/m6502/t65c02.c \
	$(FBA_CPU_DIR)/m6502/tdeco16.c \
	$(FBA_CPU_DIR)/m6502/tn2a03.c \
	$(FBA_CPU_DIR)/m6502/t6502.c \
	$(FBA_CPU_DIR)/nec/v25sfr.c \
	$(FBA_CPU_DIR)/nec/v25instr.c \
	$(FBA_CPU_DIR)/nec/necinstr.c \
	$(FBA_BURN_DIR)/drv/capcom/ctv_make.cpp \
	$(FBA_BURN_DIR)/drv/pgm/pgm_sprite_create.cpp

#ifeq ($(LIBRETRO_OPTIMIZATIONS), 1)
   #BURN_BLACKLIST += $(FBA_BURN_DIR)/drv/capcom/ctv.cpp
#endif

ifeq ($(HAVE_GRIFFIN), 1)
   GRIFFIN_CXXSRCFILES := $(GRIFFIN_DIR)/cps12.cpp $(GRIFFIN_DIR)/cps3.cpp $(GRIFFIN_DIR)/neogeo.cpp $(GRIFFIN_DIR)/pgm.cpp $(GRIFFIN_DIR)/snes.cpp $(GRIFFIN_DIR)/galaxian.cpp $(GRIFFIN_DIR)/cpu-m68k.cpp
   BURN_BLACKLIST += $(FBA_CPU_DIR)/m68000_intf.cpp
else
   CPS2_DIR := $(FBA_BURN_DRIVERS_DIR)/capcom
   CPS3_DIR := $(FBA_BURN_DRIVERS_DIR)/cps3
   GALAXIAN_DIR := $(FBA_BURN_DRIVERS_DIR)/galaxian
   NEOGEO_DIR := $(FBA_BURN_DRIVERS_DIR)/neogeo
   PGM_DIR := $(FBA_BURN_DRIVERS_DIR)/pgm
   SNES_DIR := $(FBA_BURN_DRIVERS_DIR)/snes
   M68K_DIR := $(FBA_CPU_DIR)/m68k
   MD_DIR := $(FBA_BURN_DRIVERS_DIR)/megadrive
   PCE_DIR := $(FBA_BURN_DRIVERS_DIR)/pce
endif

ifeq ($(NO_MD), 1)
   MD_DIR :=
endif

ifeq ($(NO_PCE), 1)
   PCE_DIR :=
endif

ifeq ($(NO_CPS), 1)
   BURN_BLACKLIST += $(FBA_BURN_DRIVERS_DIR)/capcom/cps.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps2_crpt.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_config.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_draw.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_mem.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_obj.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_pal.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_run.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_rw.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cps_scr.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cpsr.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cpsrd.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/cpst.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/ctv.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/d_cps1.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/d_cps2.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/fcrash_snd.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/ps.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/ps_m.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/ps_z.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/qs.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/qs_c.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/qs_z.cpp \
		$(FBA_BURN_DRIVERS_DIR)/capcom/sf2mdt_snd.cpp
endif

ifeq ($(NO_NEO), 1)
   NEOGEO_DIR :=
endif

FBA_BURN_DIRS := $(FBA_BURN_DIR) \
	$(FBA_BURN_DIR)/devices \
	$(FBA_BURN_DIR)/snd \
	$(CPS2_DIR) \
	$(FBA_BURN_DRIVERS_DIR)/cave \
	$(CPS3_DIR) \
	$(FBA_BURN_DRIVERS_DIR)/dataeast \
	$(GALAXIAN_DIR) \
	$(FBA_BURN_DRIVERS_DIR)/irem \
	$(FBA_BURN_DRIVERS_DIR)/konami \
	$(MD_DIR) \
	$(NEOGEO_DIR) \
	$(PCE_DIR) \
	$(PGM_DIR) \
	$(FBA_BURN_DRIVERS_DIR)/pre90s \
	$(FBA_BURN_DRIVERS_DIR)/psikyo \
	$(FBA_BURN_DRIVERS_DIR)/pst90s \
	$(FBA_BURN_DRIVERS_DIR)/sega \
	$(SNES_DIR) \
	$(FBA_BURN_DRIVERS_DIR)/taito \
	$(FBA_BURN_DRIVERS_DIR)/toaplan \
	$(FBA_BURN_DRIVERS_DIR)

FBA_CPU_DIRS := $(FBA_CPU_DIR) \
	$(FBA_CPU_DIR)/arm \
	$(FBA_CPU_DIR)/arm7 \
	$(FBA_CPU_DIR)/h6280 \
	$(FBA_CPU_DIR)/hd6309 \
	$(FBA_CPU_DIR)/i8039 \
	$(FBA_CPU_DIR)/konami \
	$(M68K_DIR) \
	$(FBA_CPU_DIR)/m6502 \
	$(FBA_CPU_DIR)/m6800 \
	$(FBA_CPU_DIR)/m6805 \
	$(FBA_CPU_DIR)/m6809 \
	$(FBA_CPU_DIR)/nec \
	$(FBA_CPU_DIR)/pic16c5x \
	$(FBA_CPU_DIR)/s2650 \
	$(FBA_CPU_DIR)/sh2 \
	$(FBA_CPU_DIR)/z80


# CPS-1 Only
ifeq ($(target),cps1)
   SOURCES_CXX := $(FBA_BURN_DIR)/devices/8255ppi.cpp \
		$(FBA_BURN_DIR)/devices/eeprom.cpp \
		$(FBA_BURN_DIR)/devices/timekpr.cpp \
		$(FBA_BURN_DIR)/snd/burn_ym2151.cpp \
		$(FBA_BURN_DIR)/snd/burn_ym2203.cpp \
		$(FBA_BURN_DIR)/snd/msm5205.cpp \
		$(FBA_BURN_DIR)/snd/msm6295.cpp \
		$(FBA_CPU_DIR)/m68000_intf.cpp \
		$(FBA_CPU_DIR)/z80_intf.cpp

   SOURCES_C :=	$(FBA_BURN_DIR)/snd/ay8910.c \
		$(FBA_BURN_DIR)/snd/fm.c \
		$(FBA_BURN_DIR)/snd/ym2151.c \
		$(FBA_BURN_DIR)/snd/ymdeltat.c

   FBA_BURN_DIRS := $(CPS2_DIR) \
		$(FBA_BURN_DIR) \
		$(FBA_BURN_DRIVERS_DIR)

   FBA_CPU_DIRS := $(FBA_CPU_DIR)/a68k \
		$(M68K_DIR) \
		$(FBA_CPU_DIR)/z80

   BURN_BLACKLIST += $(CPS2_DIR)/d_cps2.cpp \
		$(CPS2_DIR)/cps2_crpt.cpp \
		$(FBA_BURN_DIR)/burn_sound_c.cpp \
		$(FBA_BURN_DIR)/burn_vector.cpp \
		$(FBA_BURN_DIR)/tiles_generic.cpp

# CPS-2 Only
else ifeq ($(target),cps2)
   SOURCES_CXX := $(FBA_BURN_DIR)/devices/8255ppi.cpp \
		$(FBA_BURN_DIR)/devices/eeprom.cpp \
		$(FBA_CPU_DIR)/m68000_intf.cpp \
		$(FBA_CPU_DIR)/z80_intf.cpp

   FBA_BURN_DIRS := $(CPS2_DIR) \
		$(FBA_BURN_DIR) \
		$(FBA_BURN_DRIVERS_DIR)

   FBA_CPU_DIRS := $(FBA_CPU_DIR)/a68k \
		$(M68K_DIR) \
		$(FBA_CPU_DIR)/z80

   BURN_BLACKLIST += $(CPS2_DIR)/d_cps1.cpp \
		$(CPS2_DIR)/fcrash_snd.cpp \
		$(CPS2_DIR)/kabuki.cpp \
		$(CPS2_DIR)/ps.cpp \
		$(CPS2_DIR)/ps_m.cpp \
		$(CPS2_DIR)/ps_z.cpp \
		$(CPS2_DIR)/sf2mdt_snd.cpp \
		$(FBA_BURN_DIR)/burn_sound_c.cpp \
		$(FBA_BURN_DIR)/burn_vector.cpp \
		$(FBA_BURN_DIR)/tiles_generic.cpp

# CPS-3 Only
else ifeq ($(target),cps3)
   SOURCES_CXX := $(FBA_BURN_DIR)/devices/eeprom.cpp

   FBA_BURN_DIRS := $(CPS3_DIR) \
		$(FBA_BURN_DIR) \
		$(FBA_BURN_DRIVERS_DIR)

   FBA_CPU_DIRS := $(FBA_CPU_DIR)/sh2

   BURN_BLACKLIST += $(FBA_BURN_DIR)/timer.cpp \
		$(FBA_BURN_DIR)/burn_sound_c.cpp \
		$(FBA_BURN_DIR)/burn_vector.cpp \
		$(FBA_BURN_DIR)/tiles_generic.cpp

# Neo Geo Only
else ifeq ($(target),neogeo)
   SOURCES_CXX := $(FBA_BURN_DIR)/devices/eeprom.cpp \
		$(FBA_BURN_DIR)/snd/burn_ym2610.cpp \
		$(FBA_BURN_DIR)/snd/burn_ymf278b.cpp \
		$(FBA_BURN_DIR)/snd/ymz280b.cpp \
		$(FBA_CPU_DIR)/m68000_intf.cpp \
		$(FBA_CPU_DIR)/z80_intf.cpp \
		$(LIBRETRO_DIR)/neocdlist.cpp

   SOURCES_C :=	$(FBA_BURN_DIR)/snd/ay8910.c \
		$(FBA_BURN_DIR)/snd/fm.c \
		$(FBA_BURN_DIR)/snd/ymf278b.c \
		$(FBA_BURN_DIR)/snd/ymdeltat.c

   FBA_BURN_DIRS := $(NEOGEO_DIR) \
		$(FBA_BURN_DIR) \
		$(FBA_BURN_DRIVERS_DIR)

   FBA_CPU_DIRS := $(FBA_CPU_DIR)/a68k \
		$(M68K_DIR) \
		$(FBA_CPU_DIR)/z80

   BURN_BLACKLIST += $(FBA_BURN_DIR)/burn_sound_c.cpp \
		$(FBA_BURN_DIR)/burn_vector.cpp \
		$(FBA_BURN_DIR)/tiles_generic.cpp

else
   SOURCES_CXX := $(LIBRETRO_DIR)/neocdlist.cpp

endif


FBA_SRC_DIRS := $(FBA_BURNER_DIR) $(FBA_BURN_DIRS) $(FBA_CPU_DIRS)


ifeq ($(EXTERNAL_ZLIB), 1)
   FBA_DEFINES += -DEXTERNAL_ZLIB
   LDFLAGS += -lz
else
   FBA_SRC_DIRS += $(FBA_LIB_DIR)/zlib
endif

ifeq ($(INCLUDE_7Z_SUPPORT), 1)
   FBA_DEFINES += -DINCLUDE_7Z_SUPPORT
   FBA_SRC_DIRS += $(FBA_LIB_DIR)/lib7z
   BURN_BLACKLIST += $(FBA_LIB_DIR)/lib7z/LzFindMt.c \
		$(FBA_LIB_DIR)/lib7z/LzmaEnc.c \
		$(FBA_LIB_DIR)/lib7z/MtCoder.c \
		$(FBA_LIB_DIR)/lib7z/Lzma2Enc.c \
		$(FBA_LIB_DIR)/lib7z/Bcj2Enc.c \
		$(FBA_LIB_DIR)/lib7z/Threads.c \
		$(FBA_LIB_DIR)/lib7z/Lzma86Enc.c \
		$(FBA_LIB_DIR)/lib7z/LzmaLib.c \
		$(FBA_LIB_DIR)/lib7z/XzEnc.c
else
   BURN_BLACKLIST += $(FBA_BURNER_DIR)/un7z.cpp
endif

SOURCES_CXX += $(GRIFFIN_CXXSRCFILES) $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(FBA_SRC_DIRS),$(wildcard $(dir)/*.cpp)))
SOURCES_CXX += $(LIBRETRO_DIR)/libretro.cpp $(LIBRETRO_DIR)/gami.cpp $(LIBRETRO_DIR)/gamc.cpp
SOURCES_C += $(filter-out $(BURN_BLACKLIST),$(foreach dir,$(FBA_SRC_DIRS),$(wildcard $(dir)/*.c)))

FBA_CXXOBJ := $(SOURCES_CXX:.cpp=.o)
FBA_COBJ := $(SOURCES_C:.c=.o)

OBJS := $(FBA_COBJ) $(FBA_CXXOBJ)

FBA_DEFINES += -DUSE_SPEEDHACKS -D__LIBRETRO__ \
	-D__LIBRETRO_OPTIMIZATIONS__ \
	-DWANT_NEOGEOCD \
	$(ENDIANNESS_DEFINES) \
	$(PLATFORM_DEFINES)

ifneq ($(platform),qnx)
   FBA_DEFINES += -DINLINE="static inline" -DSH2_INLINE="static inline"
endif

INCFLAGS := \
	-I$(LIBRETRO_DIR) \
	-I$(FBA_BURN_DIR) \
	-I$(MAIN_FBA_DIR)/cpu \
	-I$(FBA_BURN_DIR)/snd \
	-I$(FBA_BURN_DIR)/devices \
	-I$(FBA_INTERFACE_DIR) \
	-I$(FBA_INTERFACE_DIR)/input \
	-I$(FBA_INTERFACE_DIR)/cd \
	-I$(FBA_BURNER_DIR) \
	-I$(FBA_CPU_DIR) \
	-I$(FBA_CPU_DIR)/i8039 \
	-I$(FBA_LIB_DIR)/zlib \
	-I$(FBA_LIB_DIR)/lib7z \
	-I$(FBA_BURN_DIR)/drv/capcom \
	-I$(FBA_BURN_DIR)/drv/dataeast \
	-I$(FBA_BURN_DIR)/drv/cave \
	-I$(FBA_BURN_DIR)/drv/neogeo \
	-I$(FBA_BURN_DIR)/drv/psikyo \
	-I$(FBA_BURN_DIR)/drv/sega \
	-I$(FBA_BURN_DIR)/drv/toaplan \
	-I$(FBA_BURN_DIR)/drv/taito \
	-I$(FBA_GENERATED_DIR) \
	-I$(FBA_LIB_DIR)

ifeq ($(LIBRETRO_OPTIMIZATIONS), 1)
   FBA_DEFINES += -D__LIBRETRO_OPTIMIZATIONS__
endif

ifeq ($(DEBUG), 1)
   CFLAGS += -O0 -g
   CXXFLAGS += -O0 -g
else
   CFLAGS += -O2 -DNDEBUG
   CXXFLAGS += -O2 -DNDEBUG
endif

ifeq ($(platform), sncps3)
   WARNINGS_DEFINES =
else
   WARNINGS_DEFINES = -Wno-write-strings
endif

CFLAGS += $(fpic) $(WARNINGS_DEFINES) $(FBA_DEFINES)
CXXFLAGS += $(fpic) $(WARNINGS_DEFINES) $(FBA_DEFINES)
LDFLAGS += $(fpic)

ifeq ($(FRONTEND_SUPPORTS_RGB565), 1)
   CFLAGS += -DFRONTEND_SUPPORTS_RGB565
   CXXFLAGS += -DFRONTEND_SUPPORTS_RGB565
endif

ifeq ($(ZLIB_INTERNAL), 0)
   INCFLAGS += -I$(FBA_LIB_DIR)
endif

ifeq ($(LIBRETRO_OPTIMIZATIONS), 1)
   GENERATE_OPTS := -D__LIBRETRO_OPTIMIZATIONS__
else
   GENERATE_OPTS :=
endif

ifeq ($(USE_OLD_MAPPING), 1)
   FBA_DEFINES += -DUSE_OLD_MAPPING
   SOURCES_CXX += $(LIBRETRO_DIR)/bind_map.cpp
endif

PERL = perl$(EXE_EXT)
M68KMAKE_EXE = m68kmake$(EXE_EXT)
CTVMAKE_EXE = ctvmake$(EXE_EXT)
PGM_SPRITE_CREATE_EXE = pgmspritecreate$(EXE_EXT)
EXE_PREFIX = ./

.PHONY: clean generate-files generate-files-clean clean-objs

ifeq ($(platform), theos_ios)
COMMON_FLAGS := -DIOS -DARM $(COMMON_DEFINES) $(INCFLAGS) -I$(THEOS_INCLUDE_PATH) -Wno-error
$(LIBRARY_NAME)_CFLAGS += $(CFLAGS) $(COMMON_FLAGS)
$(LIBRARY_NAME)_CXXFLAGS += $(CXXFLAGS) $(COMMON_FLAGS)
${LIBRARY_NAME}_FILES = $(SOURCES_CXX) $(SOURCES_C)
include $(THEOS_MAKE_PATH)/library.mk
else
all: $(TARGET)


generate-files-clean:
	rm -rf $(FBA_GENERATED_DIR)/
	rm -rf $(FBA_CPU_DIR)/m68k/m68kopac.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kopdm.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kopnz.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.c
	rm -rf $(FBA_CPU_DIR)/m68k/m68kops.h

generate-files:
	@mkdir -p $(FBA_GENERATED_DIR) 2>/dev/null || /bin/true
	@echo "Generating $(FBA_GENERATED_DIR)/driverlist.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/gamelist.pl -o $(FBA_GENERATED_DIR)/driverlist.h -l gamelist.txt $(FBA_BURN_DRIVERS_DIR)/capcom $(FBA_BURN_DRIVERS_DIR)/cave $(FBA_BURN_DRIVERS_DIR)/cps3 $(FBA_BURN_DRIVERS_DIR)/dataeast $(FBA_BURN_DRIVERS_DIR)/galaxian $(FBA_BURN_DRIVERS_DIR)/irem $(FBA_BURN_DRIVERS_DIR)/konami $(FBA_BURN_DRIVERS_DIR)/megadrive $(FBA_BURN_DRIVERS_DIR)/neogeo $(FBA_BURN_DRIVERS_DIR)/pce $(FBA_BURN_DRIVERS_DIR)/pgm $(FBA_BURN_DRIVERS_DIR)/pre90s $(FBA_BURN_DRIVERS_DIR)/psikyo $(FBA_BURN_DRIVERS_DIR)/pst90s $(FBA_BURN_DRIVERS_DIR)/sega $(FBA_BURN_DRIVERS_DIR)/snes $(FBA_BURN_DRIVERS_DIR)/taito $(FBA_BURN_DRIVERS_DIR)/toaplan
	$(PERL) $(FBA_SCRIPTS_DIR)/gamelist.pl -o $(FBA_GENERATED_DIR)/driverlist-gx.h -l gamelist-gx.txt $(FBA_BURN_DRIVERS_DIR)/cave $(FBA_BURN_DRIVERS_DIR)/cps3 $(FBA_BURN_DRIVERS_DIR)/dataeast $(FBA_BURN_DRIVERS_DIR)/galaxian $(FBA_BURN_DRIVERS_DIR)/irem $(FBA_BURN_DRIVERS_DIR)/konami $(FBA_BURN_DRIVERS_DIR)/pgm $(FBA_BURN_DRIVERS_DIR)/pre90s $(FBA_BURN_DRIVERS_DIR)/psikyo $(FBA_BURN_DRIVERS_DIR)/pst90s $(FBA_BURN_DRIVERS_DIR)/sega $(FBA_BURN_DRIVERS_DIR)/snes $(FBA_BURN_DRIVERS_DIR)/taito $(FBA_BURN_DRIVERS_DIR)/toaplan
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/neo_sprite_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/neo_sprite_func.pl -o $(FBA_GENERATED_DIR)/neo_sprite_func.h $(LIBRETRO_OPTIMIZATIONS)
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func.h..."
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/psikyo_tile_func_table.h..."
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/psikyo_tile_func.pl -o $(FBA_GENERATED_DIR)/psikyo_tile_func.h
	@echo "Generating $(FBA_GENERATED_DIR)/cave_sprite_func.h..."
	@echo ""
	@echo "Generating[ $(FBA_GENERATED_DIR)/cave_tile_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_sprite_func.pl -o $(FBA_GENERATED_DIR)/cave_sprite_func.h
	$(PERL) $(FBA_SCRIPTS_DIR)/cave_tile_func.pl -o $(FBA_GENERATED_DIR)/cave_tile_func.h
	@echo ""
	@echo "Generate $(FBA_GENERATED_DIR)/toa_gp9001_func_table.h"
	@echo ""
	$(PERL) $(FBA_SCRIPTS_DIR)/toa_gp9001_func.pl -o $(FBA_GENERATED_DIR)/toa_gp9001_func.h
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(PGM_SPRITE_CREATE_EXE) $(FBA_BURN_DRIVERS_DIR)/pgm/pgm_sprite_create.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/pgm_sprite.h..."
	@echo ""
	$(EXE_PREFIX)$(PGM_SPRITE_CREATE_EXE) > $(FBA_GENERATED_DIR)/pgm_sprite.h
	$(CC_SYSTEM) $(GENERATE_OPTS) -o $(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/m68kmake.c
	$(EXE_PREFIX)$(M68KMAKE_EXE) $(FBA_CPU_DIR)/m68k/ $(FBA_CPU_DIR)/m68k/m68k_in.c
	$(CXX_SYSTEM) $(GENERATE_OPTS) -o $(CTVMAKE_EXE) $(FBA_BURN_DRIVERS_DIR)/capcom/ctv_make.cpp
	@echo ""
	@echo "Generating $(FBA_GENERATED_DIR)/ctv.h..."
	@echo ""
	$(EXE_PREFIX)$(CTVMAKE_EXE) > $(FBA_GENERATED_DIR)/ctv.h

%.o: %.cpp
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(INCFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CPPFLAGS) $(CFLAGS) $(INCFLAGS) -c $< -o $@

$(TARGET): $(OBJS)
ifeq ($(STATIC_LINKING), 1)
	$(AR) rcs $@ $(OBJS)
else
	$(CXX) -o $@ $(SHARED) $(OBJS) $(LDFLAGS)
endif


clean-objs:
	rm -f $(OBJS)

clean:
	rm -f $(TARGET)
	rm -f $(OBJS)
	rm -f $(M68KMAKE_EXE)
	rm -f $(PGM_SPRITE_CREATE_EXE)
	rm -f $(CTVMAKE_EXE)
endif
